function InitializationError() { throw { name: "InitializationError", message: "Library has to be initialized first!" } } function readJSON(t) { var e = new XMLHttpRequest; if (e.open("GET", t, !1), e.send(null), 200 == e.status) return e.responseText } var colors = readJSON("/src/resources/colors.json"); colors = JSON.parse(colors); var initialized, lastCoordinates, _graphElement, ctx, dataIsSet, _data, lineColor = "#000000", lineWidth = 1; class GraphJS { static init(t) { if (!t) throw new ReferenceError('Parameter "graphElement" is required!'); if (initialized) throw "Library already initialized. Use the the update method to update parameters"; initialized = !0, lastCoordinates = [0, 0], ctx = (_graphElement = t).getContext("2d") } static setData(t) { initialized || InitializationError(), dataIsSet = !0, _data = t } static colorList(t = document.getElementById("id")) { if (!t) { var e = []; console.log("%c[GraphJS]\n", "color: #4287f5"); for (let t = 0; t < colors.length; t++) { const o = colors[t]; e.push(o.name), console.log(`%c${o.name}`, `color: ${o.hex}`) } return e.join(", ") } var o = []; for (let t = 0; t < colors.length; t++) { const e = colors[t]; var r = document.createElement("span"); r.innerHTML = e.name + ", ", r.style.color = e.hex, o.push(r) } for (let e = 0; e < o.length; e++)t.appendChild(o[e]) } static setLineColor(t) { if (initialized || InitializationError(), !t) return lineColor = "#00000", console.error("Color must be either Hex or a predefined one!\nTo get a list of all colors call GraphJS.colorList()"); if (t.startsWith("#")) return lineColor = t; var e = !1; for (let o = 0; o < colors.length; o++) { const r = colors[o]; r.name.toLowerCase() === t.toLowerCase() && (e = !0, lineColor = r.hex) } if (e) return lineColor; console.error("Color must be either Hex or a predefined one!\nTo get a list of all colors call GraphJS.colorList()") } static setLineWidth(t) { if (initialized || InitializationError(), !t) return lineWidth = 1, console.error("Width is required!"); lineWidth = t, t > 5 && console.info("%c[GraphJS]", "color: #4287f5", " It is not recommended to set the line width to anything above 5.") } static drawGraph() { if (initialized || InitializationError(), !dataIsSet) throw new Error("No graph data provided"); for (let t = 0; t < _data.length; t++) { if (_graphElement.width < _data[t][0]) return _graphElement.width = _data[t][0], lastCoordinates = [0, 0], void this.drawGraph(_data); if (lastCoordinates[0] > _data[t][0]) throw ctx.clearRect(0, 0, _graphElement.width, _graphElement.height), ctx.font = "30px Arial", ctx.fillText("Illegal coordinates. Check errors.", _graphElement.height / 2, _graphElement.height / 2), console.log(`Current X must be greater than last X coordinate\nlast X ${lastCoordinates[0]} > current X ${_data[t][0]}`), new Error("Illegal coordinates"); ctx.beginPath(), ctx.moveTo(lastCoordinates[0], lastCoordinates[1]), lastCoordinates = _data[t], ctx.lineTo(_data[t][0], _data[t][1]), ctx.strokeStyle = lineColor, ctx.lineWidth = lineWidth, ctx.stroke() } } static clearGraph() { initialized || InitializationError(), ctx.clearRect(0, 0, _graphElement.width, _graphElement.height) } static loadFromConfigJSON(t = "") { var e = readJSON(t); if (!(e = JSON.parse(e)).initElementId) throw Error("Value initElementId in your config JSON must be present!"); if (!e.coordinationSets) throw Error("Value coordinationSets in your config JSON must be present!"); this.init(document.getElementById(e.initElementId)), this.setData(e.coordinationSets), e.styling && (e.styling.lineColor && "string" == typeof e.styling.lineColor ? this.setLineColor(e.styling.lineColor) : console.info("%c[GraphJS]", "color: #4287f5", "typeof lineColors must be String"), e.styling.lineWidth && "number" == typeof e.styling.lineWidth ? this.setLineWidth(e.styling.lineWidth) : console.info("%c[GraphJS]", "color: #4287f5", "typeof lineWidth must be Number")) } } export default GraphJS;